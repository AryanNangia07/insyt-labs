# -*- coding: utf-8 -*-
"""Streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E1n11IRvE_1byvUQFRAjIG5HCpGe4mtq
"""

# prompt: import google drive

from google.colab import drive
drive.mount('/content/drive')

pip install streamlit

# streamlit_app.py
import streamlit as st
import pandas as pd
from prophet import Prophet
import matplotlib.pyplot as plt
from datetime import timedelta

file_path = "/content/drive/MyDrive/BSC Internship/FBT Sales.xlsx"
df = pd.read_excel(file_path)
df.columns = df.columns.str.replace(' ', '_').str.lower()

df['date'] = pd.to_datetime(df['date'], format= "%Y/%m/%d")

import holidays

# 1. Create holiday dataframe
ind_holidays = holidays.India(years=[2023, 2024, 2025])
holiday_df = pd.DataFrame([
    {'ds': pd.to_datetime(date), 'holiday': 'indian_holiday'}
    for date in ind_holidays.keys()
])

# 2. Rename columns for Prophet
df_copy = df.copy()
df_copy = df_copy.rename(columns={'date': 'ds', 'sales': 'y'})

# UI Elements
st.title("Sales Forecast with Future Regressor Inputs")

# Forecast duration
months = st.selectbox("Select forecast horizon:", options=[1, 2, 3], index=0)

# Regressor inputs
monthly_marketing = st.slider("Monthly Marketing Spend", min_value=0, max_value=500000, value=100000, step=10000)
selling_price = st.slider("Selling Price (SP)", min_value=2000, max_value=4499, value=3499, step=100)

# Compute regressor inputs
forecast_days = months * 30
daily_marketing = monthly_marketing / 30
discount = 4499 - selling_price

# Prepare data
cutoff_date = pd.Timestamp('2025-06-30')
df_train = df_copy[df_copy['ds'] <= cutoff_date].copy()

# Get last inventory value
last_inventory = df_train['inventory'].iloc[-1]

# Prepare future dataframe
model = Prophet(
    growth='linear',
    yearly_seasonality=True,
    daily_seasonality=True,
    changepoint_prior_scale=0.3
)

model.add_regressor('discount')
model.add_regressor('marketing')
model.add_regressor('inventory')

# Fit model
model.fit(df_train)

# Build future dataframe
future = model.make_future_dataframe(periods=forecast_days)
future['discount'] = df_copy['discount'].tolist()[:len(future)]
future['marketing'] = df_copy['marketing'].tolist()[:len(future)]
future['inventory'] = df_copy['inventory'].tolist()[:len(future)]

# Replace future regressor values
future.loc[future['ds'] > cutoff_date, 'discount'] = discount
future.loc[future['ds'] > cutoff_date, 'marketing'] = daily_marketing
future.loc[future['ds'] > cutoff_date, 'inventory'] = last_inventory

# Forecast
forecast = model.predict(future)

# Plot
st.write("### Forecast Plot")
fig1 = model.plot(forecast)
st.pyplot(fig1)